"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// Generated by CoffeeScript 2.5.1
(function () {
  var Discord;
  Discord = require('discord.js');

  module.exports.run = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(client, msg, args) {
      var fetched, results;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              results = [];

            case 1:
              if (!true) {
                _context.next = 13;
                break;
              }

              _context.next = 4;
              return msg.channel.messages.fetch({
                limit: 100
              });

            case 4:
              fetched = _context.sent;
              msg.channel.bulkDelete(fetched);

              if (fetched.size >= 2) {
                _context.next = 10;
                break;
              }

              return _context.abrupt("break", 13);

            case 10:
              results.push(void 0);

            case 11:
              _context.next = 1;
              break;

            case 13:
              return _context.abrupt("return", results);

            case 14:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2, _x3) {
      return _ref.apply(this, arguments);
    };
  }();
}).call(void 0);